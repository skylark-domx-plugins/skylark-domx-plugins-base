{"version":3,"sources":["shortcutter.js"],"names":["define","types","plugins","instantiate","slice","Array","prototype","shortcutter","pluginName","extfn","elm","options","plugin","args","call","arguments","unshift","apply","this","methodName","Error","isFunction","charAt","ret","undefined"],"mappings":";;;;;;;AAAAA,QACI,sBACA,YACA,iBACD,SACCC,EACAC,EACAC,GAEA,aAEA,IAAIC,EAAQC,MAAMC,UAAUF,MAyD5B,OAAQF,EAAQK,YAvDhB,SAAqBC,EAAWC,GAK5B,OAAO,SAAUC,EAAIC,GACjB,IAAKC,EAAST,EAAYO,EAAKF,EAAW,YAC1C,GAAiB,aAAZG,EACH,OAAOC,GAAU,KAGnB,IAAKA,EAAQ,CACT,IAAIC,EAAOT,EAAMU,KAAKC,UAAU,GAGhC,GAFAF,EAAKG,QAAQN,EAAKF,EAA6B,iBAAXG,GAAuBA,OAC3DC,EAAST,EAAYc,MAAMf,EAAQW,GACb,iBAAXF,EACT,OAAOO,KAGb,GAAIP,EAAS,CACT,IAAIE,EAAOT,EAAMU,KAAKC,UAAU,GAChC,GAAIN,EACA,OAAOA,EAAMQ,MAAML,EAAOC,GAE1B,GAAsB,iBAAXF,EAAqB,CAC5B,IAAIQ,EAAaR,EAEjB,IAAMC,EACF,MAAM,IAAIQ,MAAO,0BAA4BZ,EACzC,uDAC+BW,EAAa,KAGpD,IAAMlB,EAAMoB,WAAYT,EAAQO,KAA6C,MAA3BA,EAAWG,OAAQ,GACjE,MAAM,IAAIF,MAAO,mBAAqBD,EAAa,SAAWX,EAC1D,oBAGRK,EAAOT,EAAMU,KAAKD,EAAK,GAEvB,IAAIU,EAAMX,EAAOO,GAAYF,MAAML,EAAOC,GAK1C,OAJIU,GAAOX,IACTW,OAAMC,GAGDD","file":"../shortcutter.js","sourcesContent":["define([\r\n    \"skylark-langx-types\",\r\n    \"./plugins\",\r\n    \"./instantiate\"\r\n], function(\r\n    types,\r\n    plugins,\r\n    instantiate\r\n) {\r\n    \"use strict\";\r\n\r\n    var slice = Array.prototype.slice;\r\n\r\n    function shortcutter(pluginName,extfn) {\r\n       /*\r\n        * Create or get or destory a plugin instance assocated with the element,\r\n        * and also you can execute the plugin method directory;\r\n        */\r\n        return function (elm,options) {\r\n            var  plugin = instantiate(elm, pluginName,\"instance\");\r\n            if ( options === \"instance\" ) {\r\n              return plugin || null;\r\n            }\r\n\r\n            if (!plugin) {\r\n                let args = slice.call(arguments,2); //2\r\n                args.unshift(elm, pluginName,typeof options == 'object' && options || {})\r\n                plugin = instantiate.apply(plugins,args);\r\n                if (typeof options != \"string\") {\r\n                  return this;\r\n                }\r\n            } \r\n            if (options) {\r\n                let args = slice.call(arguments,1); //2\r\n                if (extfn) {\r\n                    return extfn.apply(plugin,args);\r\n                } else {\r\n                    if (typeof options == 'string') {\r\n                        var methodName = options;\r\n\r\n                        if ( !plugin ) {\r\n                            throw new Error( \"cannot call methods on \" + pluginName +\r\n                                \" prior to initialization; \" +\r\n                                \"attempted to call method '\" + methodName + \"'\" );\r\n                        }\r\n\r\n                        if ( !types.isFunction( plugin[ methodName ] ) || methodName.charAt( 0 ) === \"_\" ) {\r\n                            throw new Error( \"no such method '\" + methodName + \"' for \" + pluginName +\r\n                                \" plugin instance\" );\r\n                        }\r\n\r\n                        args = slice.call(args,1); //remove method name\r\n\r\n                        var ret = plugin[methodName].apply(plugin,args);\r\n                        if (ret == plugin) {\r\n                          ret = undefined;\r\n                        }\r\n\r\n                        return ret;\r\n                    }                \r\n                }                \r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return  plugins.shortcutter = shortcutter;\r\n});"]}